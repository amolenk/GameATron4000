@inject IJSInProcessRuntime _jsRuntime
@inject NavigationManager _navigationManager
@implements IDisposable

@code
{
    private bool _inDebugMode = false;

    [CascadingParameter]
    public IMediator Mediator { get; set; } = null!;

    private DotNetObjectReference<GlobalHotKeys>? _objectReference;

    [JSInvokable]
    public async Task<bool> OnKeyDownAsync(string key)
    {
        switch (key)
        {
            case "d":
                _inDebugMode = !_inDebugMode;
                await Mediator.PublishAsync(new DebugModeChanged(_inDebugMode));
                return true;
            case "r":
                await Mediator.SendAsync(new RefreshGameScript());
                return true;
            case "l":
                await Mediator.SendAsync(new LoadGame());
                return true;
            case "q":
                _navigationManager.NavigateTo("/");
                return true;
            case "s":
                await Mediator.SendAsync(new SaveGame());
                return true;
            case ".":
            case " ":
                await Mediator.SendAsync(new SkipWait());
                return true;
        }

        return false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);

            _jsRuntime.InvokeVoid("captureKeyDown", _objectReference);
        }
    }

    public void Dispose()
    {
        _jsRuntime.InvokeVoid("releaseKeyDown");
        _objectReference?.Dispose();
    }
}
