@inject HttpClient _client
@inject IMediator _mediator
@inject ILogger<GameScriptView> _logger
@inject IGameManifestRepository _gameManifestRepository

<div>[SCRIPT]</div>

@code {

    private IScriptCompiler _compiler = null!;
    private GameManifest _manifest = null!;
    private GameScript _script = null!;

    protected override void OnInitialized()
    {
        _mediator.Subscribe<GameManifestLoaded>(OnGameManifestLoaded);
    }

    private async Task OnGameManifestLoaded(GameManifestLoaded @event)
    {
        Console.WriteLine("Handle GameScriptView.GameManifestLoadedEvent!");

        _compiler = await CSharpScriptCompiler.CreateAsync(_client);
        _manifest = @event.Manifest;

        await TryLoadGameScriptAsync();
    }

    private async Task<bool> TryLoadGameScriptAsync()
    {
        try
        {
            _logger.LogDebug("Loading game script...");

            _script = await LoadGameScriptAsync();

            _logger.LogDebug("Game script loaded.");

            return true;
        }
        catch (ScriptException ex)
        {
            _logger.LogCritical(ex, "Failed to load game script.");

            foreach (var error in ex.Errors)
            {
                _logger.LogError($"{error.Path}({error.Line},{error.Character}): {error.Message}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogCritical(ex, "Failed to load game script.");
        }

        return false;
    }

    private async Task<GameScript> LoadGameScriptAsync()
    {
        List<ScriptFile> sources = new();

        foreach (var sourceUrl in _manifest.Spec.Scripts)
        {
            // Add current time to prevent caching.
            var content = await _client.GetStringAsync(
                $"{_manifest.BasePath}{sourceUrl}?time={DateTime.Now}");

            sources.Add(new ScriptFile(content, sourceUrl));
        }

        return await GameScript.LoadAsync(sources, _compiler, _mediator);
    }
}