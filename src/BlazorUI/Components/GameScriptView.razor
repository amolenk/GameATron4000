@inject HttpClient _client
@inject IMediator _mediator
@inject ILogger<GameScriptView> _logger
@inject IGameManifestRepository _gameManifestRepository

@if (_errors is not null)
{
    <ul>
    @foreach (var error in _errors)
    {
        <li>@(error.Path)(@error.Line,@error.Character): @error.Message</li>
    }
    </ul>
}

@code {

    private IScriptCompiler _compiler = null!;
    private GameManifest _manifest = null!;
    private GameScript _script = null!;
    private ImmutableArray<ScriptError>? _errors;

    protected override void OnInitialized()
    {
        _mediator.Subscribe<GameManifestLoaded>(OnGameManifestLoadedAsync);
        _mediator.Subscribe<ReloadGameScript>(OnReloadGameScriptAsync);
        _mediator.Subscribe<StartGame>(OnStartGameAsync);
        _mediator.Subscribe<ExecutePlayerAction>(OnExecutePlayerActionAsync);
    }

    private Task OnStartGameAsync(StartGame _) => _script.StartGameAsync();

    private Task OnExecutePlayerActionAsync(ExecutePlayerAction command) =>
        _script.ExecutePlayerActionAsync(command.Action);

    private async Task OnGameManifestLoadedAsync(GameManifestLoaded @event)
    {
        _compiler = await CSharpScriptCompiler.CreateAsync(_client);
        _manifest = @event.Manifest;

        await TryLoadGameScriptAsync();
    }

    private async Task OnReloadGameScriptAsync(ReloadGameScript _)
    {
        var saveGame = _script.SaveGame();

        var options = new JsonSerializerOptions
        {
            IgnoreNullValues = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        // TODO Remove
        var data = JsonSerializer.Serialize(saveGame, options);
        Console.WriteLine(data);

        await TryLoadGameScriptAsync();
        await _script.StartGameAsync(saveGame);
    }

    private async Task<bool> TryLoadGameScriptAsync()
    {
        try
        {
            _script = await LoadGameScriptAsync();
            return true;
        }
        catch (ScriptException ex)
        {
            _errors = ex.Errors;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogCritical(ex, "Failed to load game script.");
        }

        return false;
    }

    private async Task<GameScript> LoadGameScriptAsync()
    {
        List<ScriptFile> sources = new();

        foreach (var sourceUrl in _manifest.Spec.Scripts)
        {
            // Add current time to prevent caching.
            var content = await _client.GetStringAsync(
                $"{_manifest.BasePath}{sourceUrl}?time={DateTime.Now}");

            sources.Add(new ScriptFile(content, sourceUrl));
        }

        return await GameScript.LoadAsync(sources, _compiler, _mediator);
    }
}