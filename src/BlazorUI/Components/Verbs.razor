@inject IMediator _mediator;

@if (_playerInputEnabled)
{
    <ul>
        <li @onclick="@(() => OnVerbClick(new GiveAction()))">Give</li>
        <li @onclick="@(() => OnVerbClick(new PickUpAction()))">Pick up</li>
        <li @onclick="@(() => OnVerbClick(new UseAction()))">Use</li>
        <li @onclick="@(() => OnVerbClick(new OpenAction()))">Open</li>
        <li @onclick="@(() => OnVerbClick(new LookAtAction()))">Look at</li>
        <li @onclick="@(() => OnVerbClick(new PushAction()))">Push</li>
        <li @onclick="@(() => OnVerbClick(new CloseAction()))">Close</li>
        <li @onclick="@(() => OnVerbClick(new TalkToAction()))">Talk to</li>
        <li @onclick="@(() => OnVerbClick(new PullAction()))">Pull</li>
    </ul>
}

@code {

    private bool _playerInputEnabled = true;

    protected override void OnInitialized()
    {
        _mediator.Subscribe<PlayerActionStarted>(OnPlayerCommandStarted);
        _mediator.Subscribe<PlayerActionCompleted>(OnPlayerActionCompleted);
    }

    private Task OnPlayerCommandStarted(PlayerActionStarted @event)
    {
        _playerInputEnabled = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnPlayerActionCompleted(PlayerActionCompleted @event)
    {
        _playerInputEnabled = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnVerbClick(IAction newAction)
    {
        await _mediator.PublishAsync(new VerbSelected(newAction));
    }
}