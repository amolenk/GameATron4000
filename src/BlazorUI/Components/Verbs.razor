@inject IMediator _mediator;

@if (_playerInputEnabled)
{
    <ul>
        <li @onclick="@(() => OnVerbClick("Look at"))">Look at</li>
        <li @onclick="@(() => OnVerbClick("Push"))">Push</li>
        <li @onclick="@(() => OnVerbClick("Pull"))">Pull</li>
    </ul>
}

@code {

    private bool _playerInputEnabled = true;

    protected override void OnInitialized()
    {
        _mediator.Subscribe<PlayerActionStarted>(OnPlayerCommandStarted);
        _mediator.Subscribe<PlayerActionCompleted>(OnPlayerActionCompleted);
    }

    private Task OnPlayerCommandStarted(PlayerActionStarted @event)
    {
        _playerInputEnabled = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnPlayerActionCompleted(PlayerActionCompleted @event)
    {
        _playerInputEnabled = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnVerbClick(string value)
    {
        await _mediator.PublishAsync(new VerbSelected(new LookAtAction()));
    }
}