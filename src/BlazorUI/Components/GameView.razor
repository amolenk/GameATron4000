@implements IDisposable
@inject IGameManifestRepository _gameManifestRepository
@inject IGameScriptLoader _gameScriptLoader;

@if (_gameScriptLoader.ScriptErrors.Any())
{
    <p>Whoops! Failed to load game script:</p>
    <ul class="errorList">
    @foreach (var error in _gameScriptLoader.ScriptErrors)
    {
        <li class="errorMessage">
            @(error.Path)(@error.Line,@error.Character): @error.Message
        </li>
    }
    </ul>
}
else
{
    <div id="room-view">
        <RoomView />
    </div>
    <div id="action-bar">
        <ActionBar />
    </div>
    <div id="ui-controls">
        <div id="verb-picker">
            <VerbPicker />
        </div>
        <div id="inventory-view">
            <InventoryView />
        </div>
    </div>
}

@code {

    private GameManifest? _manifest;
    private GameScript? _script;

    [CascadingParameter]
    public IMediator Mediator { get; set; } = null!;

    protected override void OnInitialized()
    {
        Mediator.Subscribe<StartGame>(OnStartGameAsync);
        Mediator.Subscribe<ExecutePlayerAction>(OnExecutePlayerActionAsync);
        Mediator.Subscribe<ContinueDialogue>(OnContinueDialogueAsync);
        Mediator.Subscribe<RefreshGameScript>(OnRefreshGameScriptAsync);
    }

    private async Task OnStartGameAsync(StartGame command)
    {
        _manifest = await _gameManifestRepository.TryLoadGameManifest(
            command.DiskNumber);
        
        if (_manifest is not null)
        {
            await Mediator.PublishAsync(new GameManifestLoaded(_manifest));

            _script = await _gameScriptLoader.LoadFromManifestAsync(_manifest);
            if (_script is not null)
            {
                await _script.StartGameAsync(Mediator);
            }
            else
            {
                // Failed to load script, re-render to show errors.
                StateHasChanged();
            }
        }
    }

    private async Task OnExecutePlayerActionAsync(ExecutePlayerAction command)
    {
        if (_script is not null)
        {
            await _script.ExecutePlayerActionAsync(command.Action, Mediator);
        }
    }

    private async Task OnContinueDialogueAsync(ContinueDialogue command)
    {
        if (_script is not null)
        {
            await _script.ContinueDialogue(command.Option, Mediator);
        }
    }

    private async Task OnRefreshGameScriptAsync(RefreshGameScript _)
    {
        if (_manifest is not null && _script is not null)
        {
            var saveGame = _script.SaveGame();

            var options = new JsonSerializerOptions
            {
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

            // TODO Remove
            var data = JsonSerializer.Serialize(saveGame, options);
            Console.WriteLine(data);

            _script = await _gameScriptLoader.LoadFromManifestAsync(_manifest);
            if (_script is not null)
            {
                await _script.RestoreGameAsync(saveGame, Mediator);
            }
            else
            {
                // Failed to load script, re-render to show errors.
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        if (_script is not null)
        {
            _script.Dispose();
        }

        _gameScriptLoader.ClearErrors();
    }
}