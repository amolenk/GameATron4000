@inject IMediator _mediator

<div style="text-align: center">
    <p>@_actionText</p>
</div>

@code {

    private ActionFactory _actionFactory = null!;
    private IAction _action = null!;
    private string _actionText = string.Empty;

    protected override void OnInitialized()
    {
        _mediator.Subscribe<GameStarted>(OnGameStartedAsync);
        _mediator.Subscribe<VerbSelected>(OnVerbSelectedAsync);
        _mediator.Subscribe<GameObjectPointerDown>(OnGameObjectPointerDownAsync);
        _mediator.Subscribe<GameObjectPointerOut>(OnGameObjectPointerOutAsync);
        _mediator.Subscribe<GameObjectPointerOver>(OnGameObjectPointerOverAsync);
    }

    private Task OnGameStartedAsync(GameStarted @event)
    {
        _actionFactory = new ActionFactory(@event.Game);
        _action = _actionFactory.Create(Verb.WalkTo);
        _actionText = _action.GetDisplayText();

        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnVerbSelectedAsync(VerbSelected @event)
    {
        _action = _actionFactory.Create(@event.Verb);
        _actionText = _action.GetDisplayText();

        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnGameObjectPointerOverAsync(GameObjectPointerOver @event)
    {
        _actionText = _action.GetDisplayText(@event.GameObject);

        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnGameObjectPointerOutAsync(GameObjectPointerOut @event)
    {
        _actionText = _action.GetDisplayText();

        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnGameObjectPointerDownAsync(GameObjectPointerDown @event)
    {
        if (_action.Add(@event.GameObject))
        {
            await _mediator.SendAsync(new ExecutePlayerAction(_action));

            _action = _actionFactory.Create(Verb.WalkTo);
            _actionText = _action.GetDisplayText();

        }
        else
        {
            _actionText = _action.GetDisplayText();
        }

        StateHasChanged();
    }
}