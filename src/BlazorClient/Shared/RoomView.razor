@implements INotificationHandler<GameStartedEvent>
@implements INotificationHandler<RoomEnteredEvent>
@inject IDynamicMediator _mediator
@inject IJSRuntime _jsRuntime
@inject ILoggerFactory _loggerFactory

<div id="phaser">
</div>

@code {

    private PhaserHost? _phaser;

    protected override void OnInitialized()
    {
        _mediator.Subscribe<GameStartedEvent>(this);
        _mediator.Subscribe<RoomEnteredEvent>(this);
    }

    public async Task Handle(GameStartedEvent notification, CancellationToken cancellationToken)
    {
        _phaser = new PhaserHost(
            notification.Manifest,
            _jsRuntime,
            _loggerFactory,
            _mediator,
            () => new RunStartScriptCommand());

        await _phaser.StartAsync("phaser");
    }

    public async Task Handle(RoomEnteredEvent notification, CancellationToken cancellationToken)
    {
        await _phaser!.Graphics.AddImageAsync(250, 250, "assets", "rooms/park");

        await _phaser!.Graphics.AddTextAsync(100, 100, "You are in a room!");
    }
}